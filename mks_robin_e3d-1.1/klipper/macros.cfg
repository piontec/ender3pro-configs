#######################
# bed mesh calibrate
#######################
[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE
    BED_MESH_OUTPUT
    SAVE_CONFIG

#######################
# filament change
#######################
[gcode_macro M600]
########### Change this ############
default_parameter_X: 0            #park position
default_parameter_Y: 224                #park position
default_parameter_Z: 10                #park position
default_parameter_E: -100            #retract dist
variable_ext0_temp: 0
########### Gcode ############
gcode:
    SET_GCODE_VARIABLE MACRO=M600 VARIABLE=ext0_temp VALUE={printer.extruder.target}
    SAVE_GCODE_STATE NAME=M600_state
    SET_IDLE_TIMEOUT TIMEOUT=7200
    PAUSE
    G91
    G1 E-1 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000        ;park position
    G91
    G0 E{E} F400             ;retract additional filament to move out of melt zone
    G92 E0
    M104 S60

#    Use this command resume during a mid print filament swap (DONT USE OCTO/MAINSAIL/DWC RESUME)
[gcode_macro SWAP_PURGE] 
variable_toolTemp: 0
gcode:
    {% set toolTemp = printer["gcode_macro M600"].ext0_temp %}
    G90
    G1 X0 Y0 F3000        ;park position
    M117 Reheating to {toolTemp}
    M109 S{toolTemp}
    G91
    M117 Purging
    G1 E100 F400
    G90
    M117

[gcode_macro SWAP_RESUME] 
variable_toolTemp: 0
gcode:
    {% set toolTemp = printer["gcode_macro M600"].ext0_temp %}
    G90
    M117 Resuming print
    M109 S{toolTemp}
    RESTORE_GCODE_STATE NAME=M600_state
    resume
    M117

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

[gcode_macro load_filament]
gcode:
    {% if printer.extruder.temperature < printer.configfile.config.extruder.min_extrude_temp | default(170)  %}
        M117 Heating to min_extrude_temp
    	M109 S{printer.configfile.config.extruder.min_extrude_temp | default(170)}
    {% endif %} 
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E70 F600
    M117 Filament loaded
    RESTORE_GCODE_STATE NAME=__filament__load

[gcode_macro unload_filament]
gcode:
    {% if printer.extruder.temperature < printer.configfile.config.extruder.min_extrude_temp | default(170)  %}
        M117 Heating to min_extrude_temp
    	M109 S{printer.configfile.config.extruder.min_extrude_temp | default(170)}
    {% endif %} 
    SAVE_GCODE_STATE NAME=__filament__unload
    M83
    G1 E-70 F960
    M117 Filament unloaded
    RESTORE_GCODE_STATE NAME=__filament__unload

# neopixels as progress bar
# [gcode_macro M73]
# rename_existing: M73.1
# default_parameter_LEDCOUNT: 18  # Set to your chain_count
# default_parameter_NAME: lights # Set to the name of your neopixel
# gcode:
#     M73.1
#     {% if 'P' in params %}
#         {% for led in range(1, LEDCOUNT|int +1 )  %}
#             {% if ( P|int / 100 * LEDCOUNT|int ) >= led %}
#                 SET_LED LED={ NAME } RED=1.0 GREEN=0.5 BLUE=0.3 INDEX={ led }
#             {% else %}
#                 SET_LED LED={ NAME } RED=0 GREEN=0 BLUE=0 INDEX={ led }
#             {% endif %}
#         {% endfor %}
#         
#     {% endif %}

#############
# babystepping Z
#############
#    Macro to Babystep Up 0.01mm
[gcode_macro babystep_up1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

#    Macro to Babystep Down 0.01mm
[gcode_macro babystep_down1]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

#    Macro to Babystep Up 0.02mm
[gcode_macro babystep_up2]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.02 MOVE=1

#    Macro to Babystep Down 0.02mm
[gcode_macro babystep_down2]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.02 MOVE=1

#    Macro to Babystep Up 0.05mm
[gcode_macro babystep_up3]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.05 MOVE=1

#    Macro to Babystep Down 0.05mm
[gcode_macro babystep_down3]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1

#############
# Abom's menu
#############
#[menu __abommain]
#type: list
#name: AbomMain
#
#[menu __abommain __tune]
#type: list
#enable: {printer.idle_timeout.state == "Printing"}
#name: Tune
#index: 1

[menu __main __fil_chg]
type: list
name: Filament change
index: 1
enable: {printer.pause_resume.is_paused}

[menu __main __fil_chg __filament_change_resume]
type: command
name: Continue print
gcode:
    SWAP_RESUME
    {(menu.exit.True)}

[menu __main __fil_chg __filament_change_purge]
type: command
name: Purge filament
gcode:
    SWAP_PURGE

[menu __main __fil_chg __sd_resume]
type: command
name: SD resume
gcode:
    M24

[menu __main __setup __calib]
type: disabled

[menu __main __calibrate]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Calibrate
index: 2

#[menu __abommain __octoprint]
#type: list
#name: OctoPrint
#enable: true
#
#[menu __abommain __sdcard]
#type: vsdlist
#enable: false
#name: SD Card

[menu __main __calibrate __calibration_home_all_axes]
type: command
name: Home XYZ
gcode: G28
        
[menu __main __calibrate __calibration_probe_calibrate]
type: list
name: Probe Calibrate

[menu __main __calibrate __calibration_probe_calibrate __calibrate]
type: command
name: Probe Calib.
gcode:
    {% set ns = namespace(NEED2HOME = false) %}
    {% for AXIS in ["x", "y", "z"] %}
        {% if AXIS not in printer.toolhead.homed_axes %}
            {% set ns.NEED2HOME = true %}
        {% endif %}
    {% endfor %}   
    {% if ns.NEED2HOME == true %}
        G28
    {% endif %}
   PROBE_CALIBRATE
      
[menu __main __calibrate __calibration_probe_calibrate __adjust_Z+1]
type: command
name: Z+1: {'%05.1f' % printer.gcode_move.position.z}
gcode: TESTZ Z=+1     
    
[menu __main __calibrate __calibration_probe_calibrate __adjust_Z-1]
type: command
name: Z-1: {'%05.1f' % printer.gcode_move.position.z}
gcode: TESTZ Z=-1    
     
[menu __main __calibrate __calibration_probe_calibrate __adjust_Z+.1]
type: command
name: Z+.1: {'%05.1f' % printer.gcode_move.position.z}
gcode: TESTZ Z=+.1     
    
[menu __main __calibrate __calibration_probe_calibrate __adjust_Z-.1]
type: command
name: Z-.1: {'%05.1f' % printer.gcode_move.position.z}
gcode: TESTZ Z=-.1  
      
[menu __main __calibrate __calibration_probe_calibrate __adjust_Zpp]
type: command
name: Z+: {'%05.1f' % printer.gcode_move.position.z}
gcode: TESTZ Z=+     
    
[menu __main __calibrate __calibration_probe_calibrate __adjust_Zmm]
type: command
name: Z-: {'%05.1f' % printer.gcode_move.position.z}
gcode: TESTZ Z=-  
    
[menu __main __calibrate __calibration_probe_calibrate __calibration_accept]
type: command
name: Accept Adj.
gcode:
     ACCEPT
     SAVE_CONFIG
     {(menu.back.True)}
     
[menu __main __calibrate __calibration_probe_calibrate __calibration_abort]
type: command
name: Abort
gcode: 
     ABORT
     {(menu.back.True)}
     
[menu __main __calibrate __manual_bed_screw_calibrate]
type: list
name: Man. Bed Screw Calib.

[menu __main __calibrate __manual_bed_screw_calibrate __bed_screws_adjust]
type: command
name: Adjust Bed Screws
gcode:
     BED_SCREWS_ADJUST
     
[menu __main __calibrate __manual_bed_screw_calibrate __accept]
type: command
name: Accept
gcode:
     ACCEPT
     
[menu __main __calibrate __manual_bed_screw_calibrate __adjusted]
type: command
name: Adjusted
gcode:
     ADJUSTED
     {(menu.back.True)}

[menu __main __calibrate __bed_mesh]
type: list
name: Bed Mesh Calib.

[menu __main __calibrate __bed_mesh __start]
type: command
name: Start Mesh Calib.
gcode:
     BED_MESH_CALIBRATE
     SAVE_CONFIG
     {(menu.back.True)}

[menu __main __filament __width_current]
type: command
enable: {'hall_filament_width_sensor' in printer}
name: Dia: {'%.2F' % printer.hall_filament_width_sensor.Diameter}
index: 0

[menu __main __filament __raw_width_current]
type: command
enable: {'hall_filament_width_sensor' in printer}
name: Raw: {'%4.0F' % printer.hall_filament_width_sensor.Raw}
index: 1

[menu __main __filament __loadf]
type: command
name: Load Fil. fast
gcode:
    load_filament

[menu __main __filament __loads]
type: command
name: Load Fil. slow
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E100 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloadf]
type: command
name: Unload Fil.fast
gcode:
    unload_filament


